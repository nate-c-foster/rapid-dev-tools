{
  "custom": {},
  "params": {
    "argName": "",
    "argValue": "",
    "functionPath": "",
    "index": ""
  },
  "propConfig": {
    "params.argName": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.argValue": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.functionPath": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.index": {
      "paramDirection": "input",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 41,
      "width": 218
    }
  },
  "root": {
    "children": [
      {
        "events": {
          "component": {
            "onActionPerformed": {
              "config": {
                "script": "\n\tpayload \u003d { \"functionPath\": self.view.params.functionPath,\n\t\t\t\t\"argName\": self.view.params.argName,\n\t\t\t\t\"argValue\": self.props.value,\n\t\t\t\t\"index\": self.view.params.index\n\t\t\t\t}\n\t\n\tsystem.perspective.sendMessage(\"UpdateFunctionArgument\",payload)\n\t\n"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "Dropdown"
        },
        "position": {
          "basis": "36px"
        },
        "propConfig": {
          "props.options": {
            "binding": {
              "config": {
                "path": "parent.custom.typeId"
              },
              "transforms": [
                {
                  "code": "\n\n\ttagProvider \u003d settings.getValue(\u0027Tag Editor\u0027, \u0027tagProvider\u0027)\n\ttypeId \u003d self.parent.custom.typeId\n\t\n\tresults \u003d system.tag.readBlocking(tagProvider + \u0027_types_/\u0027 + typeId + \u0027.Parameters\u0027)[0].value\n\t\n\toptions \u003d []\n\tif results:\n\t\tfor result in results:\n\t\t\tparameter \u003d result.getProperty().name\n\t\t\toptions.append({\u0027value\u0027: parameter, \u0027label\u0027: parameter})\n\t\n\t\t\n\treturn options",
                  "type": "script"
                }
              ],
              "type": "property"
            }
          },
          "props.value": {
            "binding": {
              "config": {
                "path": "view.params.argValue"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "dropdownOptionStyle": {
            "classes": "RapidDev/Dropdown/Options"
          },
          "style": {
            "classes": "RapidDev/Dropdown/Root"
          }
        },
        "type": "ia.input.dropdown"
      }
    ],
    "custom": {
      "typeId": "Components/Alarm"
    },
    "meta": {
      "name": "root"
    },
    "propConfig": {
      "custom.typeId": {
        "persistent": true
      }
    },
    "props": {
      "direction": "column"
    },
    "scripts": {
      "customMethods": [],
      "extensionFunctions": null,
      "messageHandlers": [
        {
          "messageType": "UpdateParameterNames",
          "pageScope": true,
          "script": "\t# implement your handler here\n\t\n\ttypeId \u003d payload[\u0027typeId\u0027]\n\tindex \u003d payload[\u0027index\u0027]\n\t\n\tprint \u0027typeId \u0027, typeId\n\tprint \u0027index \u0027, index\n\tprint \u0027current index \u0027, self.view.params.index\n\tif self.view.params.index \u003d\u003d index and typeId:\n\t\tself.custom.typeId \u003d typeId",
          "sessionScope": false,
          "viewScope": false
        }
      ]
    },
    "type": "ia.container.flex"
  }
}